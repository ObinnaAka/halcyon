## By default in a before template, all you need is a valid JSON payload.
## You can also stash data to be made available to the functions in the pipeline.

## [Start] Set default values. **
$util.qr($context.args.input.put("id", $util.defaultIfNull($ctx.args.input.id, $util.autoId())))
#set( $createdAt = $util.time.nowISO8601() )
## Automatically set the createdAt timestamp. **
$util.qr($context.args.input.put("createdAt", $util.defaultIfNull($ctx.args.input.createdAt, $createdAt)))
## Automatically set the updatedAt timestamp. **
$util.qr($context.args.input.put("updatedAt", $util.defaultIfNull($ctx.args.input.updatedAt, $createdAt)))
## [End] Set default values. **
## [Start] Validate create mutation for @key 'byStaff'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["updatedAt", "id"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When creating any part of the composite sort key for @key 'byStaff', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate create mutation for @key 'byStaff'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "updatedAt#id": "updatedAtId"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("updatedAt#id", "updatedAtId"))
#end
$util.qr($ctx.args.input.put("updatedAt#id","${ctx.args.input.updatedAt}#${ctx.args.input.id}"))
## [Start] Validate create mutation for @key 'byMember'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["updatedAt", "id"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When creating any part of the composite sort key for @key 'byMember', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate create mutation for @key 'byMember'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "updatedAt#id": "updatedAtId"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("updatedAt#id", "updatedAtId"))
#end
$util.qr($ctx.args.input.put("updatedAt#id","${ctx.args.input.updatedAt}#${ctx.args.input.id}"))
## [Start] Validate create mutation for @key 'byStatus'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = ["updatedAt", "id"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $ctx.args.input.containsKey("$keyFieldName") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$ctx.args.input.containsKey("$keyFieldName") )
    $util.error("When creating any part of the composite sort key for @key 'byStatus', you must provide all fields for the key. Missing key: '$keyFieldName'.")
  #end
#end
## [End] Validate create mutation for @key 'byStatus'. **
#if( $util.isNull($dynamodbNameOverrideMap) )
  #set( $dynamodbNameOverrideMap = {
  "updatedAt#id": "updatedAtId"
} )
#else
  $util.qr($dynamodbNameOverrideMap.put("updatedAt#id", "updatedAtId"))
#end
$util.qr($ctx.args.input.put("updatedAt#id","${ctx.args.input.updatedAt}#${ctx.args.input.id}"))
## [Start] Setting "version" to 1. **
$util.qr($ctx.args.input.put("version", 1))
## [End] Setting "version" to 1. **

## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put("__typename", "Transaction"))
#set( $condition = {
  "expression": "attribute_not_exists(#id)",
  "expressionNames": {
      "#id": "id"
  }
} )
#if( $context.args.input.condition )
  #set( $condition.expressionValues = {} )
  #set( $conditionFilterExpressions = $util.parseJson($util.transform.toDynamoDBConditionExpression($context.args.input.condition)) )
  $util.qr($condition.put("expression", "($condition.expression) AND $conditionFilterExpressions.expression"))
  $util.qr($condition.expressionNames.putAll($conditionFilterExpressions.expressionNames))
  $util.qr($condition.expressionValues.putAll($conditionFilterExpressions.expressionValues))
#end
#if( $condition.expressionValues && $condition.expressionValues.size() == 0 )
  #set( $condition = {
  "expression": $condition.expression,
  "expressionNames": $condition.expressionNames
} )
#end

{
	"version": "2018-05-29",
    "operation" : "TransactWriteItems",
    "transactItems" : [
    	{
           "table": "Transaction-qcrpijij6zbstkwuydhandigsy-dev",
           "operation": "PutItem",
           "key": { "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id) },
           "attributeValues": $util.dynamodb.toMapValuesJson($context.args.input),
           "condition": $util.toJson($condition)
      	} ,
        
        
        #if( $ctx.args.input.transactionType == "Sign In")
    	{
           "table" : "Member-qcrpijij6zbstkwuydhandigsy-dev",
           "operation": "UpdateItem",
           "key": { "id":  $util.dynamodb.toDynamoDBJson($ctx.args.input.memberId) },
           "update": {
               "expression": "SET signInStatus = :signInStatus",
               "expressionValues": {
                   ":signInStatus": $util.dynamodb.toDynamoDBJson(true)
               }
           }
        },
      	#elseif( $ctx.args.input.transactionType == "Sign Out" )
        {
           "table" : "Member-qcrpijij6zbstkwuydhandigsy-dev",
           "operation": "UpdateItem",
           "key": { "id":  $util.dynamodb.toDynamoDBJson($ctx.args.input.memberId) },
          	"update": {
               "expression": "SET signInStatus = :signInStatus",
               "expressionValues": {
                   ":signInStatus": $util.dynamodb.toDynamoDBJson(false)
               }
           } 
       }, #end
       
       #foreach( $tool in $context.args.input.tools)
       {
           "table": "Tool-qcrpijij6zbstkwuydhandigsy-dev",
           "operation": "UpdateItem",
           "key": { "id": $util.dynamodb.toDynamoDBJson($tool) },
            #if( $ctx.args.input.transactionType == "Tool Checkout" )
       		"update": {
               "expression": "SET currentHolderId = :currentHolderId, status = :status",
               "expressionValues": {
                   ":currentHolderId" : $util.dynamodb.toDynamoDBJson($ctx.args.input.memberId) ,
                   ":status" : $util.dynamodb.toDynamoDBJson("Checked Out") 
               }
           }
       		#elseif( $ctx.args.input.transactionType == "Tool Check In" )
       		"update": {
               "expression": "SET currentHolderId = :currentHolderId, status = :status",
               "expressionValues": {
                   ":currentHolderId" : $util.dynamodb.toDynamoDBJson($ctx.args.input.staffMemberId) ,
                   ":status" : $util.dynamodb.toDynamoDBJson("Checked In") 
               }
           }
       		#elseif( $ctx.args.input.transactionType == "Cleaning" )
       		"update": {
               "expression": "SET status = :status",
               "expressionValues": {
                   ":status" : $util.dynamodb.toDynamoDBJson("Cleaning") 
               }
           }
      		#elseif( $ctx.args.input.transactionType == "Cleaned" )
           	"update": {
               "expression": "SET status = :status",
               "expressionValues": {
                   ":status" : $util.dynamodb.toDynamoDBJson("Cleaned") 
               }
           } #end
        }, #end
    ]
}
    