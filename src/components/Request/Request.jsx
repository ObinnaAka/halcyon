import React, { useState, useEffect } from "react";
import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemText from "@material-ui/core/ListItemText";
import Collapse from "@material-ui/core/Collapse";
import ExpandLess from "@material-ui/icons/ExpandLess";
import ExpandMore from "@material-ui/icons/ExpandMore";
import styles from "./Request.modules.css";
import moment from "moment";
import { API } from "aws-amplify";
import { updateTransaction, createNewTransaction } from "../../graphql-optimized/mutations";
import Countdown from "react-countdown";

// import ListItemIcon from "@material-ui/core/ListItemIcon";

const Request = ({
	id,
	requests,
	member,
	staffMemberId,
	date,
	transactionType,
	workstation = "-",
	comment,
	removeFromState,
}) => {
	const [open, setOpen] = useState(false);
	const [requestDone, setRequestDone] = useState(false);
	const [itemDone, setItemDone] = useState(false);
	const [transactionInfo, setTransactionInfo] = useState({});
	const [transactionComment, setTransactionComment] = useState("");

	// TODO State management for request using autogenerated dictionary list
	useEffect(() => {
		if (requests) {
			let initialTransaction = {};
			requests.map((request) => (initialTransaction[request] = ""));
			setTransactionInfo(initialTransaction);
		}
	}, []);

	const handleItemClick = () => {
		setOpen(!open);
	};

	// TODO Add animation during exit
	// requests = ["test1", "test2"];

	const finishTransaction = async () => {
		let restult1 = await API.graphql({
			query: createNewTransaction,
			variables: {
				input: {
					memberId: member.eid,
					staffMemberId: staffMemberId,
					transactionType: transactionType,
					transactionStatus: "Finished",
					transactionComment: transactionComment,
					tools:
						transactionType === "Sign In" || transactionType === "Sign Out"
							? requests[0]
							: Object.values(transactionInfo),
				},
			},
		});
		let restult2 = await API.graphql({
			query: updateTransaction,
			variables: {
				input: {
					id: id,
					transactionStatus: "Finished",
					expectedVersion: 1,
					updatedAt: date,
					createdAt: date,
				},
			},
		});

		removeFromState(id);
	};

	const toolRequest = (
		<List className="barcode-list">
			{requests ? (
				requests.length && requests[0] ? (
					requests.map((item, index) => {
						return (
							<ListItem className="barcode-item" key={index}>
								<ListItemText className="barcode title" primary={item} />
								<input
									className="barcode input"
									placeholder="Barcode"
									onChange={(event) => {
										setTransactionInfo({
											...transactionInfo,
											[item]: event.target.value,
										});
									}}
								/>
							</ListItem>
						);
					})
				) : (
					<List disablePadding>
						<ListItem className={styles.nested}>No request added</ListItem>
					</List>
				)
			) : (
				"No request"
			)}
		</List>
	);

	const checkInRequest = (
		<List className="barcode-list">
			{requests && (
				<div>
					<ListItem className="barcode-item">
						<ListItemText className="barcode title" primary={"Workstation: "} />
						<ListItemText styles={{ margin: "auto" }} primary={requests[1]} />
					</ListItem>
					<ListItem className="barcode-item">
						<ListItemText className="barcode title" primary={"Time Slot: "} />
						<ListItemText styles={{ margin: "auto" }} primary={requests[2]} />
					</ListItem>
					<ListItem className="barcode-item">
						<ListItemText className="barcode title" primary={"Status: "} />
						<ListItemText styles={{ margin: "auto" }} primary={member.conductStatus} />
					</ListItem>
				</div>
			)}
		</List>
	);

	const transactionTypeRender = () => {
		switch (transactionType) {
			case "Tool Request":
				return toolRequest;
				break;

			case "Test":
				return toolRequest;
				break;

			case "Sign In":
				workstation = requests[1];

				return checkInRequest;
				break;

			default:
				break;
		}
	};
	return (
		<div className="request">
			<List>
				<React.Fragment>
					<ListItem button onClick={handleItemClick}>
						<ListItemText className="count" primary={requests ? requests.length : 0} />
						<ListItemText className="type" primary={transactionType} />
						<ListItemText className="name" primary={member.firstName + " " + member.lastName} />
						<ListItemText className="workstation" primary={workstation} />

						<ListItemText className="time" primary={moment(date).fromNow(true)} />

						{open ? <ExpandLess className="expandIcon" /> : <ExpandMore className="expandIcon" />}
						<button
							className="small"
							onClick={(event) => {
								setRequestDone(!requestDone);
								event.stopPropagation();
							}}>
							{requestDone ? (
								<Countdown
									className="time"
									date={Date.now() + 2500}
									zeroPadTime={0}
									onComplete={finishTransaction}
									renderer={(time) => time.seconds + 1}
								/>
							) : (
								"Done"
							)}
						</button>
					</ListItem>
					<Collapse in={open} timeout="auto" unmountOnExit>
						<div className="expanded">
							<div className="left">
								{transactionTypeRender()}
								<div style={{ width: "90%", flexFlow: "column wrap" }}>
									<div>{"Comment: "}</div>
									<input
										placeholder="Comment"
										onChange={(event) => {
											setTransactionComment(event.target.value);
										}}
									/>
									<button onClick={() => setItemDone(!itemDone)}>Assign</button>
								</div>
							</div>

							<div className="right">
								<div style={{ width: "100%", flexFlow: "column" }}>
									<h3>Name</h3> {member.firstName + " " + member.lastName}
								</div>

								<div style={{ width: "100%" }}>
									<h3>Workstation</h3>
									{workstation}
								</div>

								<div style={{ width: "100%" }}>
									<h3>Comment</h3>
									{comment}
								</div>
							</div>
						</div>
					</Collapse>
				</React.Fragment>
			</List>
		</div>
	);
};

export default Request;
