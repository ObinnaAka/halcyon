import React, { useEffect, useState, useContext } from "react";
import ToggleButton from "react-bootstrap/ToggleButton";
import List from "@material-ui/core/List";
import ListItem from "@material-ui/core/ListItem";
import ListItemText from "@material-ui/core/ListItemText";
import Collapse from "@material-ui/core/Collapse";
import ExpandLess from "@material-ui/icons/ExpandLess";
import ExpandMore from "@material-ui/icons/ExpandMore";
import styles from "./Request.modules.css";
import moment from "moment";
import { API } from "aws-amplify";
import { updateTransaction, createNewTransaction } from "../../graphql/mutations";
import Countdown from "react-countdown";

// import ListItemIcon from "@material-ui/core/ListItemIcon";

const Request = ({
	id,
	tools,
	member,
	staffMemberId,
	date,
	transactionType,
	workstation = "-",
	comment,
	removeFromState,
}) => {
	const [open, setOpen] = useState(false);
	const [requestDone, setRequestDone] = useState(false);
	const [itemDone, setItemDone] = useState(false);

	// TODO State management for tools using autogenerated dictionary list

	const handleItemClick = () => {
		setOpen(!open);
	};

	// TODO Add animation during
	// tools = ["test1", "test2"];

	const finishTransaction = async () => {
		console.log(staffMemberId);

		await API.graphql({
			query: createNewTransaction,
			variables: {
				input: {
					memberId: member.eid,
					staffMemberId: staffMemberId,
					transactionType: "Fulfillment",
					transactionStatus: "Finished",
				},
			},
		});
		await API.graphql({
			query: updateTransaction,
			variables: {
				input: {
					id: id,
					transactionStatus: "Finished",
					expectedVersion: 1,
					updatedAt: date,
					createdAt: date,
					// transacionComment:
				},
			},
		});
		console.log("DONE!");
		removeFromState(id);
	};

	let listTools;

	const handleListTools = () => {
		listTools = tools.length ? (
			tools.map((item, index) => (
				<ListItem button key={index} className={styles.nested}>
					<ToggleButton
						className="request_item_button"
						type="checkbox"
						onChange={() => setItemDone(!itemDone)}
						checked={itemDone}
					/>
					<ListItemText primary={item.name} />
				</ListItem>
			))
		) : (
			<List disablePadding>
				<ListItem className={styles.nested}>No tools added</ListItem>
			</List>
		);
	};

	return (
		<div className="request_item_div">
			<ToggleButton
				className="request_done"
				type="checkbox"
				onClick={() => {
					setRequestDone(!requestDone);
				}}
				checked={requestDone}
			/>
			<List className="request_item">
				<React.Fragment>
					<ListItem button onClick={handleItemClick}>
						<ListItemText className="request_item_number" primary={tools ? tools.length : 0} />
						<ListItemText className="request_type" primary={transactionType} />
						<ListItemText
							className="request_member_name"
							primary={member.firstName + " " + member.lastName}
						/>
						<ListItemText className="request_workstation" primary={workstation} />
						{requestDone ? (
							<Countdown
								className="request_time"
								date={Date.now() + 3000}
								onComplete={finishTransaction}
							/>
						) : (
							<ListItemText className="request_time" primary={moment(date).fromNow(true)} />
						)}
						{open ? <ExpandLess /> : <ExpandMore />}
					</ListItem>
					<Collapse in={open} timeout="auto" unmountOnExit>
						<div className="request_expanded_view">
							<div className="expanded_view_left">
								<List>
									{tools ? (
										tools.length && tools[0] ? (
											tools.map((item) => {
												return (
													<ListItem button key={item} className={styles.nested}>
														<ToggleButton
															className="request_item_button"
															type="checkbox"
															onChange={() => setItemDone(!itemDone)}
															checked={itemDone}
														/>
														<ListItemText primary={item} />
													</ListItem>
												);
											})
										) : (
											<List disablePadding>
												<ListItem className={styles.nested}>No tools added</ListItem>
											</List>
										)
									) : (
										"No tools"
									)}
								</List>
							</div>
							<div className="request_expanded_view_right">
								<h3>Name</h3>
								<div>{member.firstName + " " + member.lastName}</div>
								<h3>Workstation</h3>
								<div>{workstation}</div>
								<h3>Comment</h3>
								<div>{comment}</div>
							</div>
						</div>
						{/* <List component="div" disablePadding>
					<ListItem button className={styles.nested}>
						<ListItemIcon></ListItemIcon>
						<ListItemText primary="Starred" />
					</ListItem>
				</List> */}
					</Collapse>
				</React.Fragment>
			</List>
		</div>
	);
};

export default Request;
