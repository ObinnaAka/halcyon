type Transaction
  @model
  @versioned
  @searchable
  @key(name: "byStatus", fields: ["transactionStatus", "updatedAt", "id"], queryField: "getTransactionByStatus")
  @key(name: "byMember", fields: ["memberId", "createdAt", "id"])
  @key(name: "byStaff", fields: ["staffMemberId", "createdAt", "id"]) {
  id: ID
  transactionType: String!
  staffMember: Member @connection(fields: ["staffMemberId"])
  staffMemberId: ID! #This can be empty for certain situations (Sign in etc...) but must be required for connections
  member: Member @connection(fields: ["memberId"])
  memberId: ID!
  tools: [ID] 
  materials: [ID]
  training: Training @connection(name: "transactionTraining")
  request: [String]
  transactionStatus: String!
  transactionComment: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Member
  @model
  @key(fields: ["eid"])
  @key(name: "byName", fields: ["firstName", "lastName", "eid"]) {
  eid: ID!
  firstName: String!
  lastName: String!
  password: String
  phone: AWSPhone
  signInStatus: Boolean
  email: AWSEmail
  trainings: [Training] 
  itemRecord: [Tool] @connection(keyName: "byMember", fields: ["eid"])
  workstation: Tool
  conductRecord: [String]
  memberStatus: String
  reservations: [Reservation] @connection(keyName:"byMember", fields: ["eid"])
  transactionRecord: [Transaction] @connection(keyName: "byMember", fields: ["eid"])
  bevoCard: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Tool @model
  @key(name: "byName", fields: ["name", "id"])
  @key(name: "byMember", fields: ["currentHolderId", "id"])
  @key(name: "byStatus", fields: ["toolStatus", "id"])
  @key(name: "byType", fields: ["toolType", "id"]) {
  id: ID!
  name: String!
  description: String
  location: String
  toolStatus: String!
  currentHolder: Member @connection(fields: ["currentHolderId"])
  currentHolderId: ID! #will default tiw_member_account since it can't be nun-nullable
  currentWorkstation: Tool @connection(fields: ["currentWorkstationId"])
  currentWorkstationId: ID!
  reservations: [Reservation] @connection(keyName: "byTool", fields: ["id"])
  transactionRecord: [Transaction] # @connection(name: "transactionTools")
  transactionRecordId: [ID]
  toolType: String!
  updatedAt: AWSDateTime!
}

type Training @model {
  id: ID
  name: String!
  transactionRecord: [Transaction] @connection(name: "transactionTraining")
}

type Material @model {
  id: ID
  name: String!
  transactionRecord: [Transaction]#  @connection(name: "transactionMaterials")
  count: Int!
}

type Inventory @model @key(fields: ["name"]){
  name: ID!
  count: Int
  category: String
}

type Reservation @model 
@key(name: "byMember", fields: ["memberId", "id"]) 
@key(name: "byTool", fields: ["toolId", "id"]) {
	id: ID
	member: Member @connection (fields: ["memberId"])
  memberId: ID!
	tool: Tool @connection(fields: ["toolId"])
  toolId: ID!
}
# @auth(allow: groups, groups:["Staff"], operations: [create, update, delete, read, list])

input CreateTransactionInput {
  id: ID
  transactionType: String!
  staffMemberId: ID!
  memberId: ID!
  transactionStatus: String!
  transactionComment: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  transactionTrainingId: ID
  toolTransactionRecordId: ID
  tools: [ID]
  materials: [ID]
}


type Mutation {
  createNewTransaction(id:ID, transactionStatus: String, transactionComment: String, input: CreateTransactionInput!): Transaction
}
