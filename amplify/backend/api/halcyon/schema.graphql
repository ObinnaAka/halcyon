type Transaction
  @model
  @versioned
  @key(name: "byStatus", fields: ["transactionStatus", "updatedAt", "id"], queryField: "getTransactionByStatus")
  @key(name: "byUser", fields: ["userId", "createdAt", "id"], queryField: "getTransactionByUser")
  @key(name: "byStaff", fields: ["staffUserId", "createdAt", "id"], queryField: "getTransactionByStaff")
  @key(name: "byDate", fields: ["createdAt", "updatedAt", "id"], queryField: "getTransactionByDate"){
  id: ID!
  transactionType: String!
  staffUser: User @connection(fields: ["staffUserId"])
  staffUserId: ID!
  user: User @connection(fields: ["userId"])
  userId: ID!
  tools: [ID]
  materials: [ID]
  reservations: [Reservation] @connection(keyName: "byGroup", fields:["id"])
  reservationSlots: [String]
  requests: [String]
  transactionStatus: String!
  transactionComment: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum TransactionStatus{
  INITIATED
  PENDING
  PROCESSING
  COMPLETE
  CANCELLED
}

type User
  @model
  @key(name: "byName", fields: ["firstName", "lastName", "id"], queryField: "getByName") {
  id: ID!
  firstName: String!
  lastName: String!
  phone: AWSPhone
  signInStatus: Boolean
  email: AWSEmail
  itemRecord: [Tool] @connection(keyName: "byUser", fields: ["id"])
  workstation: Tool @connection(fields: ["workstationId"])
  workstationId: ID!
  conductRecord: [String]
  conductStatus: Int
  reservations: [Reservation] @connection(keyName:"byUser", fields: ["id"])
  transactionRecord: [Transaction] @connection(keyName: "byUser", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


type Tool @model
  @key(name: "byUser", fields: ["currentHolderId", "id"], queryField: "getByUser")
  @key(name: "byStatus", fields: ["toolStatus", "id"], queryField: "getByStatus")
  @key(name: "byType", fields: ["toolType", "id"], queryField: "getByType") 
  {
  id: ID!
  name: String!
  description: String
  location: String
  group: Inventory @connection (name: "toolInventory")
  toolStatus: String!
  currentHolder: User @connection(fields: ["currentHolderId"])
  currentHolderId: ID! 
  currentWorkstation: Tool @connection(fields: ["currentWorkstationId"])
  currentWorkstationId: ID!
  reservations: [Reservation] @connection(keyName: "byTool", fields: ["id"])
  transactionRecord: [Transaction] 
  transactionRecordId: [ID]
  toolType: String!
  updatedAt: AWSDateTime!
}

enum toolStatus{
  CHECKEDOUT
  CHECKEDIN
  CLEANING
  CLEANED
  OUTOFSERVICE
}

type Training @model {
  id: ID
  name: String!
  duration: Int!
  capacity: Int!
  reservations: [Reservation] @connection(name: "trainingGroup")
}

type Material @model {
  id: ID
  name: String!
  transactionRecord: [Transaction]
  price: Float!
  count: Int!
}

type Inventory @model @key(fields: ["name"]){
  name: String!
  count: Int
  toolType: String
  tools: [Tool] @connection (name: "toolInventory")
}

type Reservation @model 
@key(name: "byUser", fields: ["userId", "id"]) 
@key(name: "byTool", fields: ["toolId", "id"])
@key(name: "byGroup", fields: ["transactionGroup", "time", "id"], queryField: "listReservationGroups"){
	id: ID!
  time: String!
	user: User @connection (fields: ["userId"])
  userId: ID!
	tool: Tool @connection(fields: ["toolId"])
  toolId: ID!
  training: Training @connection(name: "trainingGroup")
  transactionGroup: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Shop @model{
  name: ID!
  openingTime: Int
  closingTime: Int
  description: String
  requiredTrainings: [Training]
  studentMessage: String
  staffMessage: String
}

input CreateTransactionInput {
  id: ID
  transactionType: String!
  staffUserId: ID!
  userId: ID!
  transactionStatus: String!
  transactionComment: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  transactionTrainingId: ID
  toolTransactionRecordId: ID
  requests: [String]
  tools: [ID]
  materials: [ID]
  reservationSlots: [ID]
}

type TransactionOutput{
  id: ID
}

type Mutation {
  createNewTransaction(id:ID, transactionStatus: String, transactionComment: String, input: CreateTransactionInput!): Transaction
}
