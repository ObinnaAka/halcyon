type Transaction @model @versioned 
	# @searchable
	@key(name: "byStatus", fields: ["status", "updatedAt", "id"])
	@key(name: "byMember", fields: ["memberId", "createdAt", "id"])
	@key(name: "byStaff", fields: ["staffMemberId", "createdAt", "id"])
{
	id: ID
	transactionType: String!
	staffMember: Member @connection(fields:["staffMemberId"])
	staffMemberId: ID! #This can be empty for certain situations (Sign in etc...) but must be required for connections
	member: Member @connection(fields:["memberId"])
	memberId: ID!
	tools: [Tool] @connection
	training: Training @connection
	status: String!
	comment: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type Member @model
	# @searchable
	@key(name: "byEID", fields: ["eid", "id"])
	@key(name: "byMemberType", fields: ["memberType", "id"]) 
	@key(name: "byName", fields:["firstName","lastName", "id"])
{
	id: ID! # Required here but the memberInput will have this set to non-required
	eid: ID!
	firstName: String!
	lastName: String!
	password: String
	phone: AWSPhone
	signInStatus: Boolean
	email: AWSEmail
	trainings: [Training] 
	itemRecord: [Tool] 
	workstation: Tool 
	conductRecord: [String]
	conductStatus: Int
	transactionRecord: [Transaction] @connection(keyName:"byMember", fields:["id"])
	bevoCard: String
	memberType: String!
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

type Tool @model
	# @searchable
	@key(name: "byName", fields: ["name", "id"])
	# @key(name: "byStatus", fields: ["status", "id"])
{
	id: ID
	name: String!
	location: String
	status: String!
	currentHolder: Member @connection(fields:["currentHolderId"])
	currentHolderId: ID! #will default tiw_member_account since it can't be nun-nullable
	currentWorkstation: Tool @connection
	transactionRecord: [Transaction] @connection
	toolType: String!
	updatedAt: AWSDateTime!
}

type Training @model 
{
	id: ID
	name: String!
}
# @auth(allow: groups, groups:["Staff"], operations: [create, update, delete, read, list])

type Query{
	getOutstandingTransactions(status:String!): [Transaction]
	listTransactionsRange(sort:String!, from:String!, limit:Int!): Transaction
}
type Mutation{
	createNewTransaction(
		id: ID
		transactionType: String!
		staffMemberId: ID! 
		memberId: ID!
		tools: [ID] 
		training: ID
		status: String!
		comment: String
	): Transaction
}